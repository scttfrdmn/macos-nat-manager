name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test
    runs-on: macos-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        brew install dnsmasq
        go mod download

    - name: Run tests
      run: make test

    - name: Run tests with coverage
      run: make test-coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: macos-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

  build:
    name: Build
    runs-on: macos-latest
    needs: [test, lint]
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: go mod download

    - name: Build binary
      run: make build-release

    - name: Test binary
      run: |
        ./nat-manager --version
        ./nat-manager --help

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: nat-manager-${{ runner.os }}
        path: nat-manager

  security:
    name: Security Scan
    runs-on: macos-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

  dependency-check:
    name: Dependency Check
    runs-on: macos-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Check for vulnerabilities
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  validate-homebrew:
    name: Validate Homebrew Formula
    runs-on: macos-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Validate Homebrew formula
      run: |
        brew install --build-from-source homebrew/nat-manager.rb --dry-run || true
        # Just check syntax for now

  integration-test:
    name: Integration Tests
    runs-on: macos-latest
    needs: [build]
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install system dependencies
      run: brew install dnsmasq

    - name: Build binary
      run: make build

    - name: Run integration tests
      run: |
        # Test CLI commands (without sudo in CI)
        ./nat-manager --help
        ./nat-manager interfaces --help
        ./nat-manager start --help
        ./nat-manager stop --help
        ./nat-manager status --help
        ./nat-manager monitor --help

    - name: Test configuration
      run: |
        # Test config file generation and validation
        mkdir -p ~/.config/nat-manager
        echo "external_interface: en0" > ~/.config/nat-manager/config.yaml
        echo "internal_interface: bridge100" >> ~/.config/nat-manager/config.yaml
        echo "internal_network: 192.168.100" >> ~/.config/nat-manager/config.yaml
        
        # Validate config (this should not require root)
        ./nat-manager --config ~/.config/nat-manager/config.yaml --help